{"version":3,"sources":["components/ApiServise.js","components/review/review.module.css","components/cast/cast.module.css","pages/movieDetails/moviedetails.module.css","components/review/Review.js","components/cast/Cast.js","pages/movieDetails/MovieDetails.js"],"names":["Query","path","params","url","URL","searchParams","append","forEach","el","axios","href","module","exports","Reviews","filmId","useState","dataReviews","setDataReviews","useEffect","then","res","catch","err","console","log","data","results","length","className","s","container","map","author","content","id","title","Cast","dataCast","setDataCast","imgUrl","profile_path","cast","name","img","src","alt","MovieDetails","filmData","setFilmData","useParams","location","useLocation","history","useHistory","pathBack","useRef","state","from","requestBack","search","movieId","handleClickGoBack","useCallback","push","pathname","current","mainContent","imgContent","button","type","onClick","mainImg","poster_path","textCont","vote_average","overview","genres","addContent","addButton","activeClassName","activeAddButton","to"],"mappings":"+IAAA,uDAKe,SAASA,EAAMC,EAAMC,GAClC,IAAIC,EAAM,IAAIC,IAAIH,EAHH,iCAMf,OAFAE,EAAIE,aAAaC,OAAO,UALV,oCAMdJ,EAAOK,SAAQ,SAAAC,GAAE,OAAIL,EAAIE,aAAaC,OAAOE,EAAG,GAAIA,EAAG,OAChDC,IAAMN,EAAIO,Q,mBCRnBC,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,wB,mBCAhED,EAAOC,QAAU,CAAC,UAAY,wBAAwB,MAAQ,oBAAoB,IAAM,oB,mBCAxFD,EAAOC,QAAU,CAAC,YAAc,kCAAkC,WAAa,iCAAiC,QAAU,8BAA8B,OAAS,6BAA6B,SAAW,+BAA+B,WAAa,iCAAiC,UAAY,gCAAgC,gBAAkB,wC,gJCIrU,SAASC,EAAT,GAA8B,IAAXC,EAAU,EAAVA,OAC9B,EAAsCC,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KAUA,OARAC,qBAAU,WACNlB,YAAM,YAAD,OAAac,EAAb,YAA+B,IAC/BK,MAAK,SAACC,GAAWH,EAAeG,MAChCC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QACjC,CAACR,IAIAE,EAEIA,EAAYS,KAAKC,QAAQC,OAAS,EAEtC,oBAAIC,UAAWC,IAAEC,UAAjB,SAEQd,EAAYS,KAAKC,QAAQK,KAAI,SAACvB,GAAD,OACzB,+BACI,6BAAKA,EAAGwB,SACR,qBAAKJ,UAAWC,IAAEC,UAAlB,SAA8BtB,EAAGyB,YAF5BzB,EAAG0B,SAQR,oBAAIN,UAAWC,IAAEM,MAAjB,6DACL,K,qBC3BJ,SAASC,EAAT,GAA2B,IAAXtB,EAAU,EAAVA,OAC3B,EAAgCC,mBAAS,MAAzC,mBAAOsB,EAAP,KAAiBC,EAAjB,KAEApB,qBAAU,WACNlB,YAAM,YAAD,OAAac,EAAb,YAA+B,IAC/BK,MAAM,SAAAC,GAAG,OAAIkB,EAAYlB,MACzBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAClC,CAACR,IAEH,IAAMyB,EAAS,SAAC/B,GACZ,OAAGA,EAAGgC,aACI,kCAAN,OAAyChC,EAAGgC,cAGrC,kCAIf,OAAIH,EACOA,EAASZ,KAAKgB,KAAKV,KAAI,SAACvB,GAAD,OAC1B,sBAAKoB,UAAWC,IAAEC,UAAlB,UACE,mBAAGF,UAAWC,IAAEM,MAAhB,SAAwB3B,EAAGkC,OACzB,qBAAKd,UAAWC,IAAEc,IAAKC,IAAKL,EAAO/B,GAAKqC,IAAKrC,EAAGkC,SAFlBlC,EAAG0B,OAK/B,K,qBCpBH,SAASY,IAAgB,IAAD,QACnC,EAA+B/B,mBAAS,MAAxC,mBAAOgC,EAAP,KAAgBC,EAAhB,KACM9C,EAAS+C,cACTC,EAAWC,cACXC,EAAUC,cACVC,EAAWC,iBAAM,iBAACL,QAAD,IAACA,GAAD,UAACA,EAAUM,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,KAC3CC,EAAYH,iBAAM,iBAACL,QAAD,IAACA,GAAD,UAACA,EAAUM,aAAX,aAAC,EAAiBG,cAAlB,QAA0B,IAElDzC,qBAAU,WACNlB,YAAM,SAAD,OAAWE,EAAO0D,SAAY,IAC9BzC,MAAK,SAACC,GAAU4B,EAAY5B,MAC5BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QACjC,CAACpB,IAEJ,IAAM2D,EAAoBC,uBAAY,WAClCV,EAAQW,KAAK,CACTC,SAAUV,EAASW,QACpBN,OAAQD,EAAYO,YAEzB,CAACb,IAEH,OAAIL,EACQ,qCACR,sBAAKnB,UAAWC,IAAEqC,YAAlB,UACI,sBAAKtC,UAAWC,IAAEsC,WAAlB,UACI,wBAAQvC,UAAWC,IAAEuC,OAAQC,KAAK,SAASC,QAAST,EAApD,qBACA,qBAAKjC,UAAWC,IAAE0C,QAAS3B,IAAG,yCAAoCG,EAAStB,KAAK+C,aAAe3B,IAAI,mBAEvG,sBAAKjB,UAAWC,IAAE4C,SAAlB,UACI,6BAAK1B,EAAStB,KAAKU,QACnB,kDAA8C,GAA3BY,EAAStB,KAAKiD,aAAjC,OACA,yCACA,4BAAI3B,EAAStB,KAAKkD,WAClB,wCACA,4BAAI5B,EAAStB,KAAKmD,OAAO7C,KAAI,SAACvB,GAAD,gBAASA,EAAGkC,KAAZ,gBAIjC,sBAAKd,UAAWC,IAAEgD,WAAlB,UACI,yDACA,+BACI,6BACI,cAAC,IAAD,CACIjD,UAAWC,IAAEiD,UACbC,gBAAiBlD,IAAEmD,gBACnBC,GAAI,CAAEjB,SAAS,WAAD,OAAa9D,EAAO0D,QAApB,UAHlB,oBAMJ,6BACI,cAAC,IAAD,CACIhC,UAAWC,IAAEiD,UACbC,gBAAiBlD,IAAEmD,gBACnBC,GAAI,CAAEjB,SAAS,WAAD,OAAa9D,EAAO0D,QAApB,aAHlB,6BAQZ,cAAC,IAAD,CAAQ3D,KAAK,wBAAb,SACI,cAACmC,EAAD,CACAtB,OAAQZ,EAAO0D,YAGnB,cAAC,IAAD,CAAQ3D,KAAK,2BAAb,SACI,cAACY,EAAD,CACAC,OAAQZ,EAAO0D,eAKZ","file":"static/js/4.b259d3c6.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '1bf71eaa77d060a8674d8281198a200f';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport default function Query(path, params) {\n  let url = new URL(path, BASE_URL);\n  url.searchParams.append('api_key', API_KEY);\n  params.forEach(el => url.searchParams.append(el[0], el[1]));\n  return axios(url.href);\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"review_container__1NwWr\",\"title\":\"review_title__iXARB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cast_container__HuuJQ\",\"title\":\"cast_title__eidIj\",\"img\":\"cast_img__2PErw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"moviedetails_mainContent__2sOMY\",\"imgContent\":\"moviedetails_imgContent__2jpJP\",\"mainImg\":\"moviedetails_mainImg___4T2f\",\"button\":\"moviedetails_button__25A_W\",\"textCont\":\"moviedetails_textCont__xzVUd\",\"addContent\":\"moviedetails_addContent__37xTq\",\"addButton\":\"moviedetails_addButton__3PyLq\",\"activeAddButton\":\"moviedetails_activeAddButton__1QYhQ\"};","import Query from \"../ApiServise\";\nimport { useEffect, useState } from \"react\";\nimport s from \"./review.module.css\";\nimport PropTypes from \"prop-types\";\n\nexport default function Reviews({ filmId }) {\n    const [dataReviews, setDataReviews] = useState();\n\n    useEffect(() => {\n        Query(`/3/movie/${filmId}/reviews`, [])\n            .then((res) => {  setDataReviews(res) })\n            .catch((err) => console.log(err));\n    }, [filmId]\n    )\n    \n    \n    if (dataReviews) {\n        \n        if (dataReviews.data.results.length > 0) {\n            return(\n        <ul className={s.container}>\n              {\n                dataReviews.data.results.map((el) => (\n                    <li key={el.id}>\n                        <h4>{el.author}</h4>\n                        <div className={s.container}>{el.content}</div>\n                    </li>\n                ))\n                    }\n        </ul>\n            )\n        } else { return <h4 className={s.title}>Sorry, we don't have any reviews for this movie</h4> }\n    } else {return null}\n}\n\nReviews.propTypes = {\n  filmId: PropTypes.string.isRequired\n  \n}","import Query from \"../../components/ApiServise\";\nimport { useEffect, useState } from \"react\";\nimport s from \"./cast.module.css\";\nimport PropTypes from \"prop-types\";\n\nexport default function Cast({ filmId }) {\n    const [dataCast, setDataCast] = useState(null);\n\n    useEffect(() => {\n        Query(`/3/movie/${filmId}/credits`, [])\n            .then((res => setDataCast(res)))\n            .catch((err) => console.log(err))\n    },[filmId])\n\n    const imgUrl = (el) => {\n        if(el.profile_path){\n            return `https://image.tmdb.org/t/p/w500${el.profile_path}`\n        }\n        else {\n            return \"http://placekitten.com/200/300\"\n                }\n    }\n    \n    if (dataCast) {\n        return dataCast.data.cast.map((el) => (\n            <div className={s.container} key={el.id}>\n              <p className={s.title}>{el.name}</p>\n                <img className={s.img} src={imgUrl(el)} alt={el.name}  />\n            </div> \n        ))\n    } else{return null}\n}\n\nCast.propTypes = {\n  filmId: PropTypes.string.isRequired\n}","import { useLocation, useParams,useHistory } from \"react-router\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport Query from \"../../components/ApiServise\";\nimport { NavLink, Route } from \"react-router-dom\";\nimport Reviews from '../../components/review/Review';\nimport Cast from '../../components/cast/Cast';\n// import { Cast, Reviews } from \"../../components\";\nimport s from \"./moviedetails.module.css\";\n\n\nexport default function MovieDetails() {\n    const [filmData,setFilmData] = useState(null);\n    const params = useParams();\n    const location = useLocation();\n    const history = useHistory();\n    const pathBack = useRef(location?.state?.from ?? \"/\");\n    const requestBack=useRef(location?.state?.search??\"\")\n    \n    useEffect(() => {    \n        Query(`movie/${ params.movieId }`, [])\n            .then((res) => { setFilmData(res) })\n            .catch((err) => console.log(err));\n    }, [params]);\n    \n    const handleClickGoBack = useCallback(() => {\n        history.push({\n            pathname: pathBack.current,\n           search: requestBack.current\n        })\n    },[history])\n     \n    if (filmData) {\n        return (<>\n        <div className={s.mainContent}>\n            <div className={s.imgContent}>\n                <button className={s.button} type=\"button\" onClick={handleClickGoBack}>Go back</button>\n                <img className={s.mainImg} src={`https://image.tmdb.org/t/p/w500${filmData.data.poster_path}`} alt=\"film poster\" />\n            </div>\n            <div className={s.textCont}>\n                <h3>{filmData.data.title}</h3>\n                <p>{`User scores ${filmData.data.vote_average*10}%`}</p>\n                <h3>Overiew</h3>\n                <p>{filmData.data.overview}</p>\n                <h3>Genres</h3>\n                <p>{filmData.data.genres.map((el)=>`${el.name} `) }</p>\n             \n            </div>\n        </div>\n            <div className={s.addContent}>\n                <h3> Additional information</h3>\n                <ul>\n                    <li>\n                        <NavLink\n                            className={s.addButton}\n                            activeClassName={s.activeAddButton}\n                            to={{ pathname: `/movies/${params.movieId}/cast`}}\n                            >Cast</NavLink>\n                    </li>\n                    <li>\n                        <NavLink\n                            className={s.addButton}\n                            activeClassName={s.activeAddButton}\n                            to={{ pathname: `/movies/${params.movieId}/reviews`}}\n                            >Reviews</NavLink>\n                    </li>\n              </ul>\n            </div>\n            <Route  path=\"/movies/:movieId/cast\">\n                <Cast\n                filmId={params.movieId}\n                />\n            </Route>\n            <Route  path=\"/movies/:movieId/reviews\">\n                <Reviews\n                filmId={params.movieId}\n                />\n            </Route>\n            </>\n        )\n    } else {return null}   \n}"],"sourceRoot":""}